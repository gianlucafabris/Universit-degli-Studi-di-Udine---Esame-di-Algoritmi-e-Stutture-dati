Di seguito sono riportate le indicazioni per la il progetto di laboratorio per l'anno accademico corrente, da consegnare necessariamente prima dell'iscrizione all'esame finale di teoria e prima del termine dell'anno accademico stesso.

Scopo del progetto è verificare che lo studente sia in grado di progettare, implementare e analizzare la complessità di un programma usando gli strumenti illustrati durante le lezioni del corso di algoritmi e strutture dati. I programmi prodotti dovranno risolvere alcuni problemi classici di natura computazionale e dovranno essere formalmente corretti. Ogni progetto di laboratorio consiste nella produzione di uno o più programmi che risolvano un problema computazionale assegnato, nella stima empirica della complessità di tali programmi al variare della dimensione dell'input e di eventuali altri parametri, e nella redazione di una relazione in cui si discutano puntualmente alcune scelte implementative e si faccia un'analisi della stima di complessità.
Il progetto richiede l'implementazione di tre algoritmi di selezione, che calcolano il 𝑘
-esimo elemento più piccolo in un vettore non ordinato di interi. Insieme all'implementazione, è richiesta una stima e un'analisi dei tempi medi di esecuzione degli algoritmi in funzione della dimensione dell'input. I tre algoritmi di selezione, denominati rispettivamente "quick select", "heap select" e "median-of-medians select", dovranno avere le seguenti caratteristiche:

Quick select

Si tratta di una variante dell'algoritmo di ordinamento "quick sort", in cui ogni chiamata ricorsiva su un intervallo [𝑖,𝑗] del vettore fornito in input termina restituendo il 𝑘 -esimo elemento più piccolo del vettore qualora 𝑘−1∈[𝑖,𝑗] , oppure un valore indefinito qualora 𝑘∉[𝑖,𝑗] . In particolare, nel secondo caso, una chiamata sull'intervallo [𝑖,𝑗] con 𝑘∉[𝑖,𝑗] può terminare in tempo costante senza dover eseguire la procedura partition. L'algoritmo dovrà avere quindi complessità temporale asintotica Θ(𝑛2) nel caso pessimo e 𝑂(𝑛) nel caso medio, dove 𝑛 è il numero di elementi del vettore.

Heap select

Questo algoritmo di selezione utilizza due min-heap, denominate H1 e H2. La prima heap H1 é costruita a partire dal vettore fornito in input in tempo lineare e non viene modificata. La seconda heap H2 contiene inizialmente un solo nodo, corrispondente alla radice di H1. All'𝑖-esima iterazione, per 𝑖 che va da 1 a 𝑘−1, l'algoritmo estrae la radice di H2, che corrisponde a un nodo 𝑥𝑖 in H1, e reinserisce in H2 i nodi successori (figli sinistro e destro) di 𝑥𝑖 nella heap H1. Dopo 𝑘−1 iterazioni, la radice di H2 corrisponderà al 𝑘-esimo elemento più piccolo del vettore fornito in input.
L'algoritmo descritto ha complessità temporale 𝑂(𝑛+𝑘𝑙𝑜𝑔𝑘) sia nel caso pessimo che in quello medio. Per 𝑘 sufficientemente piccolo, quindi, l'algoritmo "heap select" sarà preferibile, almeno nel caso pessimo, all'algoritmo "quick select". È possibile implementare una variante che utilizzi opportunamente min-heap o max-heap, a seconda del valore di 𝑘.

Median-of-medians select

L'algoritmo è basato sulla suddivisione del vettore fornito in input in blocchi di dimensione limitata e sul calcolo della mediana delle mediane. Più precisamente, l'algoritmo esegue le seguenti operazioni:
- divisione dell'array in blocchi di 5 elementi, escluso eventualmente l'ultimo blocco che potrà contenere meno di 5 elementi,
- ordinamento e calcolo della mediana di ciascun blocco,
- calcolo della mediana 𝑀 delle mediane dei blocchi, attraverso chiamata ricorsiva allo stesso algoritmo
- partizionamento dell'intero array attorno alla mediana 𝑀, attraverso una variante della procedura "partition" dell'algoritmo "quick sort"
- chiamata ricorsiva nella parte di array che sta a sinistra o a destra della mediana 𝑀, in funzione del valore 𝑘 fornito in input.
Il modo più semplice per implementare quest'algoritmo consiste nell'allocare, ad ogni chiamata ricorsiva, un nuovo vettore per memorizzare le mediane dei blocchi. Esiste tuttavia un approccio più efficiente e "quasi in place" che riutilizza lo spazio allocato per il vettore originariamente fornito in input (l'unico spazio aggiuntivo utilizzato è dato dalla pila dedicata alla gestione delle chiamate ricorsive). La valutazione del progetto terrà conto della variante implementata (quella "quasi in place", essendo più complicata ma anche più efficiente, sarà valutata con un punteggio più alto).
Indipendentemente dalla variante implementata, nel caso pessimo l'algoritmo dovrà avere complessità, sia temporale che spaziale, pari a 𝑂(𝑛).


Modalità di consegna

Si richiede di implementare in un linguaggio a scelta (ad esempio, Python, C, C++, Java) gli algoritmi descritti sopra, in modo che siano formalmente corretti. Per agevolare la verifica di correttezza da parte del docente sono stati predisposti tre moduli "Virtual Programming Laboratory" (VPL) da utilizzare per caricare il codice degli algoritmi. Una condizione necessaria alla valutazione dell'elaborato è il superamento di tutti i test previsti, per tutti e tre gli algoritmi. Nota: l'esecuzione di un programma lato server attraverso un modulo VPL garantisce uno spazio di memoria di almeno 64KB, giudicato ampiamente sufficiente per risolvere il problema assegnato con qualunque algoritmo fra quelli sopra descritti.Si richiede:

Si richiede inoltre di implementare un programma per la misurazione dei tempi medi di esecuzione degli algoritmi, al variare della lunghezza 𝑛 dell'array e del parametro 𝑘 forniti in input.

La lunghezza 𝑛 dell'array deve essere compresa in un range di valori fra 100 e 100000. È necessario generare almeno 100 campioni per le possibili lunghezze 𝑛 su cui fare i test, e queste ultime devono seguire una serie geometrica. A tale scopo, è possibile utilizzare un ciclo for con un indice \(i\) che varia da 0 a 99, e definire la lunghezza dell'array come funzione esponenziale di \(i\), ad esempio: \(n_i\) = \lfloor A\cdot B^i\rfloot\), dove 𝐴 e 𝐵 sono costanti in virgola mobile calcolate opportunamente in modo da ottenere \(n_i = 100\) quando 𝑖=0 e  \(n_i = 100000\) quando 𝑖=99.

Ogni test su una lunghezza 𝑛 data deve generare in modo pseudo-casuale un array di 𝑛 interi, in un intervallo a scelta (es. interi compresi fra 0 e 1000000) e un parametro 𝑘∈{1,...,𝑛}. Si noti che la complessità di alcuni algoritmi può dipendere in modo significativo dalla scelta del range di interi e dal parametro 𝑘, ed è quindi possibile immaginare test diversificati in funzione di queste variabili allo scopo di evidenziare tali dipendenze.

Opzionalmente, è possibile effettuare dei test stimando anche i tempi di esecuzione nei casi pessimi, e confrontando gli algoritmi rispetto a questi casi.
La stima dei tempi di esecuzione di un algoritmo su un array di interi deve garantire un errore relativo massimo pari a 0.001. A tal fine si procede nel modo seguente:

Per tutte le misurazioni del tempo trascorso è necessario utilizzare un clock di sistema monotono (utilizzare, ad esempio, la funzione monotonic() del modulo time del linguaggio Python, o la procedura clock_gettime(CLOCK_MONOTONIC, &timeNow) della libreria <time.h> del linguaggio C, oppure il metodo steady_clock::now() della libreria <chrono> del C++, oppure System.nanoTime() del linguaggio Java).

Il primo passo consiste nello stimare la risoluzione del clock di sistema, utilizzando un ciclo while per calcolare l'intervallo minimo di tempo misurabile. A tale scopo è possibile utilizzare uno dei seguenti frammenti di codice in linguaggio Python, C, C++, Java:

# linguaggio Python
import time
...
def resolution():
  start = time.monotonic()
    while time.monotonic() == start:
        pass
    stop = time.monotonic()
    return stop - start

// linguaggio C
#include <time.h>
...
double duration(struct timespec start, struct timespec end) {
    return end.tv_sec - start.tv_sec
         + ((end.tv_nsec - start.tv_nsec ) / (double) 1000000000.0);
}
double getResolution(){
    struct timespec start, end;
    clock_gettime(CLOCK_MONOTONIC, &start);
    do {
        clock_gettime(CLOCK_MONOTONIC, &end);
    } while (duration(start, end) == 0.0);
    return duration(start, end);
}

// linguaggio C++
#include <stdlib.h>
#include <chrono>
...
using namespace std;
using namespace std::chrono;
...
double getResolution() {
    steady_clock::time_point start = steady_clock::now();
    steady_clock::time_point end;
    do {
        end = steady_clock::now();
    } while (start == end);
    typedef duration<double, seconds::period> secs;
    return duration_cast<secs>(end - start).count();
}

// linguaggio Java
import java.util.*;
...
class ... {
    ...
    private static double getResolution() {
       double start = System.nanoTime();
       double end;
       do {
           end = System.nanoTime();
       } while (start == end);
       return end - start;
}
Successivamente, in funzione della risoluzione stimata 𝑅 e dell'errore relativo massimo ammissibile (𝐸=0.001), si calcola il tempo minimo misurabile

𝑇min=𝑅⋅(1𝐸+1).


Per stimare il tempo medio di esecuzione di un algoritmo su istanze dell'input di dimensione 𝑛, si utilizza un ciclo while, iterando l'esecuzione dell'algoritmo su un input di dimensione 𝑛, generato in modo pseudo-casuale, e misurando complessivamente un intervallo di tempo superiore a 𝑇min. La misurazione deve essere effettuata senza interrompere il clock, ovvero calcolando l'intero intervallo di tempo trascorso dall'inizio dell'iterazione fino al momento il cui il tempo misurato risulti superiore a  𝑇min. Il tempo medio di esecuzione per una singola istanza di input sarà quindi ottenuto calcolando il rapporto fra il tempo totale misurato e il numero di iterazioni dell'algoritmo eseguite (questa divisione non influisce sull'errore relativo commesso).

Nel caso si utilizzi il linguaggio di programmazione Python o Java, occorre prestare attenzione a non allocare ripetutamente grandi strutture dati (esempio, array o stringhe) in modo dinamico (ad esempio, con l'istruzione new). Tale pratica potrebbe esaurire in breve tempo la memoria RAM disponibile e attivare il garbage collector, creando picchi nei tempi di esecuzione misurati. Considerazioni simili si applicano anche ai linguaggi C e C++, che tuttavia permettono di gestire in modo esplicito l'allocazione e la liberazione della memoria.

Per effettuare tutte le misurazioni con precisione ragionevole, non è necessario lasciare il computer in esecuzione per ore!: una decina di minuti (massimo un'ora) è ampiamente sufficiente a generare tutti i campioni e ad effettuare le misurazioni richieste. Nella fase di implementazione si consiglia di diminuire opportunamente i vari parametri (es. numero e range dei campioni) in modo da poter testare in pochi minuti il codice per le misurazioni.

I dati raccolti devono essere presentati e discussi in una relazione in formato PDF da caricare sul server e-learning. La valutazione della relazione e del codice sorgente contribuirà in modo significativo al voto finale del progetto di laboratorio. Non è necessario inviare una relazione con molte pagine: qualche decina di pagine è largamente sufficiente a discutere gli aspetti importanti dell'implementazione e dell'analisi dei tempi di esecuzione.

Si consiglia l'uso di grafici comparativi, sia in scale lineari - 𝑛 vs 𝑡(𝑛) - che doppiamente logaritmiche - log(𝑛) vs log(𝑡(𝑛)).


NOTA BENE: Durante l'elaborazione del progetto, sarà possibile caricare diverse versioni dei programmi sui vari moduli VPL (sostituendo ovviamente i vecchi file). Il progetto viene considerato come consegnato una volta che la relazione in formato PDF viene caricata online. A partire da quel momento il docente potrà prendere visione della relazione e dei codici sorgente forniti.

Sono ammessi gruppi di minimo 2 e massimo 4 persone per lo svolgimento del progetto. Il sito e-learning dell'università non permette la creazione autonoma di gruppi; si consiglia quindi di procedere scegliendo un "rappresentante" per ogni gruppo, che avrà la responsabilità di caricare tutti i file sul sito, inclusa la relazione finale. È importante che la relazione riporti in chiaro i nomi, i cognomi, le email, e i numeri di matricola di ciascun componente del gruppo.

Non è fissata una data precisa per la consegna degli elaborati, ma si chiede di consegnare il progetto entro la fine dell'anno accademico. I progetti consegnati verranno valutati dal docente a intervalli regolari (approssimativamente ogni mese). Qualora fosse necessaria una valutazione in tempi brevi, si prega di contattare il docente per e-mail (gabriele.puppis@uniud.it).
